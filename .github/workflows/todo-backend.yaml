# Todo: Replace service account JSON key with Workload Identity Federationauthentication and short-lived authentication tokens:
# https://github.com/marketplace/actions/authenticate-to-google-cloud#indirect-wif  


name: Build and deploy todo backend to GKE

on:
  push:
    branches: 
      - main
    paths:
      - 'part_3/todo-backend/**'
      - '.github/workflows/todo-backend.yml'

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: dwk-cluster
  GKE_ZONE: europe-north1-b
  IMAGE: todo-backend
  APP_PATH: ./part_3/todo-backend

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - id: 'auth'
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GKE_SA_KEY }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v2'
      with:
        project_id: ${{ secrets.GKE_PROJECT }}

   # - name: Set up Cloud SDK
   #   uses: google-github-actions/setup-gcloud
   #   with:
   #     project_id: ${{ secrets.GKE_PROJECT }}
    #    service_account_key: ${{ secrets.GKE_SA_KEY }}
    #    export_default_credentials: true

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - run: |-
        gcloud --quiet auth configure-docker

    # Install gke-gcloud-auth-plugin
    - name: Install gke-gcloud-auth-plugin
      run: |-
        gcloud components install gke-gcloud-auth-plugin

    # Get the GKE credentials so we can deploy to the cluster
    - run: |-
        gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"

    # Build the Docker image
    - name: Build
      run: |-
        cd $APP_PATH && docker build \
          --tag "gcr.io/$PROJECT_ID/$IMAGE:${GITHUB_REF#refs/heads/}-$GITHUB_SHA" \
          .

    # Push the Docker image to Google Container Registry
    - name: Publish
      run: |-
        docker push "gcr.io/$PROJECT_ID/$IMAGE:${GITHUB_REF#refs/heads/}-$GITHUB_SHA"
    
    # Decrypt the credentials
    - name: Decrypt secret
      run: |-
        curl -LO https://github.com/getsops/sops/releases/download/v3.9.3/sops-v3.9.3.linux.amd64
        sudo mv sops-v3.9.3.linux.amd64 /usr/bin/sops
        sudo chmod +x /usr/bin/sops
        export SOPS_AGE_KEY=${{ secrets.GKE_DWK_SOPS_AGE_KEY }}
        sops --decrypt $APP_PATH/manifests/secret.enc.yaml > $APP_PATH/manifests/secret.yaml

    # Set up kustomize
    - name: Set up Kustomize
      uses: imranismail/setup-kustomize@v1

    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |-
        cd $APP_PATH
        kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:${GITHUB_REF#refs/heads/}-$GITHUB_SHA
        kubectl create namespace todo-app || true
        kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/$IMAGE
        kubectl get services -o wide